package solvas.persistence.api.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import solvas.service.models.*;

import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Optional;

/**
 * Implementation for the custom methods on the {@link FleetSubscriptionDao}.
 *
 * @author Niko Strijbol
 */
@Component
public class FleetSubscriptionDaoImpl implements FleetSubscriptionDaoCustom {

    /**
     * The name of the attribute on the subscription representing the vehicle. Normally this would be generated by
     * the JPA Metamodel generator, but we cannot use that (because we don't use annotations).
     */
    private static final String VEHICLE_ATTRIBUTE = "vehicle";
    private static final String FLEET_ATTRIBUTE = "fleet";

    @Autowired
    private FleetSubscriptionDao dao;

    @Override
    public Optional<FleetSubscription> activeForVehicle(Vehicle vehicle) {
        Specification<FleetSubscription> filter = (root, query, cb) -> {
            LocalDate now = LocalDate.now();
            // The start must be before today
            Predicate start = cb.lessThanOrEqualTo(root.get("startDate"), now);
            // The end is not set or after today
            Expression<LocalDate> endDate = root.get("endDate");

            return cb.and(
                    cb.equal(root.get(VEHICLE_ATTRIBUTE), vehicle),
                    start,
                    cb.or(
                            cb.isNull(endDate),
                            cb.greaterThan(endDate, now),
                            cb.isFalse(root.get("archived"))
                    ));
        };

        // TODO normally you cannot have multiple of these.
        Collection<FleetSubscription> results = dao.findAll(filter);
        if (results.size() >= 1) {
            return Optional.ofNullable(results.iterator().next());
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Collection<FleetSubscription> fleetSubscriptionByFleetAndVehicleTypeAfterStartDate(Fleet fleet, VehicleType vehicleType, LocalDateTime startDate) {
        Specification<FleetSubscription> filter = (root, query, cb) -> {

            LocalDate startDateTrunc = LocalDate.from(startDate); //TODO replace subscription localdate to localdatetime
            Predicate start = cb.lessThanOrEqualTo(root.get("startDate"), startDateTrunc);

            Join<FleetSubscription, Vehicle> joinVehicle = root.join("vehicle");

            // Vehicle type
            Join<Vehicle, VehicleType> join = joinVehicle.join("type");
            Predicate vehicleTypePredicate = cb.equal(
                    cb.lower(join.get("name")),
                    vehicleType.getName().toLowerCase());

            Join<FleetSubscription, SubFleet> joinSubfleet = root.join("subFleet");


            return cb.and(
                    start,
                    vehicleTypePredicate,
                    cb.equal(joinSubfleet.get(FLEET_ATTRIBUTE), fleet),
                    cb.isFalse(root.get("archived")));
        };

        return dao.findAll(filter);
    }
}
